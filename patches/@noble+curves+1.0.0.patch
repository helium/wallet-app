diff --git a/node_modules/@noble/curves/abstract/edwards.js b/node_modules/@noble/curves/abstract/edwards.js
index 12dcbc7..107b530 100644
--- a/node_modules/@noble/curves/abstract/edwards.js
+++ b/node_modules/@noble/curves/abstract/edwards.js
@@ -7,6 +7,12 @@ const modular_js_1 = require("./modular.js");
 const ut = require("./utils.js");
 const utils_js_1 = require("./utils.js");
 const curve_js_1 = require("./curve.js");
+
+type BigIntOpInputs = number | bigint;
+const BigIntPow = (a: BigIntOpInputs, b: BigIntOpInputs) => {
+    return BigInt(eval(a + 'n ** ' + b + 'n'));
+}
+
 // Be friendly to bad ECMAScript parsers by not using bigint literals
 // prettier-ignore
 const _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _8n = BigInt(8);
@@ -32,7 +38,7 @@ function validateOpts(curve) {
 function twistedEdwards(curveDef) {
     const CURVE = validateOpts(curveDef);
     const { Fp, n: CURVE_ORDER, prehash: prehash, hash: cHash, randomBytes, nByteLength, h: cofactor, } = CURVE;
-    const MASK = _2n ** BigInt(nByteLength * 8);
+    const MASK = BigIntPow(_2n, BigInt(nByteLength * 8));
     const modP = Fp.create; // Function overrides
     // sqrt(u/v)
     const uvRatio = CURVE.uvRatio ||
diff --git a/node_modules/@noble/curves/abstract/weierstrass.js b/node_modules/@noble/curves/abstract/weierstrass.js
index 11833de..ca0f1a3 100644
--- a/node_modules/@noble/curves/abstract/weierstrass.js
+++ b/node_modules/@noble/curves/abstract/weierstrass.js
@@ -2,6 +2,12 @@
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.mapToCurveSimpleSWU = exports.SWUFpSqrtRatio = exports.weierstrass = exports.weierstrassPoints = exports.DER = void 0;
 /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
+
+type BigIntOpInputs = number | bigint;
+const BigIntPow = (a: BigIntOpInputs, b: BigIntOpInputs) => {
+    return BigInt(eval(a + 'n ** ' + b + 'n'));
+}
+
 // Short Weierstrass curve. The formula is: y² = x³ + ax + b
 const mod = require("./modular.js");
 const ut = require("./utils.js");
@@ -942,10 +948,10 @@ function SWUFpSqrtRatio(Fp, Z) {
     for (let o = q - _1n; o % _2n === _0n; o /= _2n)
         l += _1n;
     const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.
-    const c2 = (q - _1n) / _2n ** c1; // 2. c2 = (q - 1) / (2^c1)        # Integer arithmetic
+    const c2 = BigIntPow((q - _1n) / _2n, c1); // 2. c2 = (q - 1) / (2^c1)        # Integer arithmetic
     const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic
-    const c4 = _2n ** c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic
-    const c5 = _2n ** (c1 - _1n); // 5. c5 = 2^(c1 - 1)              # Integer arithmetic
+    const c4 = BigIntPow(_2n, c1 - _1n); // 4. c4 = 2^c1 - 1                # Integer arithmetic
+    const c5 = BigIntPow(_2n, (c1 - _1n)); // 5. c5 = 2^(c1 - 1)              # Integer arithmetic
     const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2
     const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)
     let sqrtRatio = (u, v) => {
