diff --git a/node_modules/react-native-reanimated/src/layoutReanimation/animationsManager.ts b/node_modules/react-native-reanimated/src/layoutReanimation/animationsManager.ts
index ef76cc7..cc0fbe8 100644
--- a/node_modules/react-native-reanimated/src/layoutReanimation/animationsManager.ts
+++ b/node_modules/react-native-reanimated/src/layoutReanimation/animationsManager.ts
@@ -1,23 +1,25 @@
-'use strict';
-import { withStyleAnimation } from '../animation/styleAnimation';
+"use strict";
+import { isAndroid } from "react-native-reanimated/src/PlatformChecker";
+import { withStyleAnimation } from "../animation/styleAnimation";
 import type {
   LayoutAnimation,
   LayoutAnimationStartFunction,
   SharedTransitionAnimationsValues,
   SharedValue,
-} from '../commonTypes';
-import { LayoutAnimationType } from '../commonTypes';
-import { makeMutableUI } from '../mutables';
-import { runOnUIImmediately } from '../threads';
+} from "../commonTypes";
+import { LayoutAnimationType } from "../commonTypes";
+import { makeMutableUI } from "../mutables";
+import { runOnUIImmediately } from "../threads";
 
 const TAG_OFFSET = 1e9;
+const IS_ANDROID = isAndroid();
 
 function startObservingProgress(
   tag: number,
   sharedValue: SharedValue<Record<string, unknown>>,
   animationType: LayoutAnimationType
 ): void {
-  'worklet';
+  "worklet";
   const isSharedTransition =
     animationType === LayoutAnimationType.SHARED_ELEMENT_TRANSITION;
   sharedValue.addListener(tag + TAG_OFFSET, () => {
@@ -30,7 +32,7 @@ function stopObservingProgress(
   sharedValue: SharedValue<number>,
   removeView = false
 ): void {
-  'worklet';
+  "worklet";
   sharedValue.removeListener(tag + TAG_OFFSET);
   global._notifyAboutEnd(tag, removeView);
 }
@@ -39,65 +41,75 @@ function createLayoutAnimationManager(): {
   start: LayoutAnimationStartFunction;
   stop: (tag: number) => void;
 } {
-  'worklet';
+  "worklet";
   const currentAnimationForTag = new Map();
   const mutableValuesForTag = new Map();
 
-  return {
-    start(
-      tag: number,
-      type: LayoutAnimationType,
-      /**
-       * CreateLayoutAnimationManager creates an animation manager for both
-       * Layout animations and Shared Transition Elements animations.
-       */
-      yogaValues: Partial<SharedTransitionAnimationsValues>,
-      config: (
-        arg: Partial<SharedTransitionAnimationsValues>
-      ) => LayoutAnimation
-    ) {
-      if (type === LayoutAnimationType.SHARED_ELEMENT_TRANSITION_PROGRESS) {
-        global.ProgressTransitionRegister.onTransitionStart(tag, yogaValues);
-        return;
-      }
+  const startActually = (
+    tag: number,
+    type: LayoutAnimationType,
+    /**
+     * CreateLayoutAnimationManager creates an animation manager for both
+     * Layout animations and Shared Transition Elements animations.
+     */
+    yogaValues: Partial<SharedTransitionAnimationsValues>,
+    config: (arg: Partial<SharedTransitionAnimationsValues>) => LayoutAnimation
+  ) => {
+    if (type === LayoutAnimationType.SHARED_ELEMENT_TRANSITION_PROGRESS) {
+      global.ProgressTransitionRegister.onTransitionStart(tag, yogaValues);
+      return;
+    }
 
-      const style = config(yogaValues);
-      let currentAnimation = style.animations;
+    const style = config(yogaValues);
+    let currentAnimation = style.animations;
 
-      // When layout animation is requested, but a previous one is still running, we merge
-      // new layout animation targets into the ongoing animation
-      const previousAnimation = currentAnimationForTag.get(tag);
-      if (previousAnimation) {
-        currentAnimation = { ...previousAnimation, ...style.animations };
-      }
-      currentAnimationForTag.set(tag, currentAnimation);
+    // When layout animation is requested, but a previous one is still running, we merge
+    // new layout animation targets into the ongoing animation
+    const previousAnimation = currentAnimationForTag.get(tag);
+    if (previousAnimation) {
+      currentAnimation = { ...previousAnimation, ...style.animations };
+    }
+    currentAnimationForTag.set(tag, currentAnimation);
+
+    let value = mutableValuesForTag.get(tag);
+    if (value === undefined) {
+      value = makeMutableUI(style.initialValues);
+      mutableValuesForTag.set(tag, value);
+    } else {
+      stopObservingProgress(tag, value);
+      value._value = style.initialValues;
+    }
+
+    // @ts-ignore The line below started failing because I added types to the method – don't have time to fix it right now
+    const animation = withStyleAnimation(currentAnimation);
 
-      let value = mutableValuesForTag.get(tag);
-      if (value === undefined) {
-        value = makeMutableUI(style.initialValues);
-        mutableValuesForTag.set(tag, value);
-      } else {
-        stopObservingProgress(tag, value);
-        value._value = style.initialValues;
+    animation.callback = (finished?: boolean) => {
+      if (finished) {
+        currentAnimationForTag.delete(tag);
+        mutableValuesForTag.delete(tag);
+        const shouldRemoveView = type === LayoutAnimationType.EXITING;
+        stopObservingProgress(tag, value, shouldRemoveView);
       }
+      style.callback &&
+        style.callback(finished === undefined ? false : finished);
+    };
 
-      // @ts-ignore The line below started failing because I added types to the method – don't have time to fix it right now
-      const animation = withStyleAnimation(currentAnimation);
+    startObservingProgress(tag, value, type);
+    value.value = animation;
+  };
 
-      animation.callback = (finished?: boolean) => {
-        if (finished) {
-          currentAnimationForTag.delete(tag);
-          mutableValuesForTag.delete(tag);
-          const shouldRemoveView = type === LayoutAnimationType.EXITING;
-          stopObservingProgress(tag, value, shouldRemoveView);
-        }
-        style.callback &&
-          style.callback(finished === undefined ? false : finished);
-      };
+  let start;
+  if (IS_ANDROID) {
+    start = (tag, type, yogaValues, config) =>
+      requestAnimationFrame(() => {
+        startActually(tag, type, yogaValues, config);
+      });
+  } else {
+    start = startActually;
+  }
 
-      startObservingProgress(tag, value, type);
-      value.value = animation;
-    },
+  return {
+    start,
     stop(tag: number) {
       const value = mutableValuesForTag.get(tag);
       if (!value) {
@@ -109,7 +121,7 @@ function createLayoutAnimationManager(): {
 }
 
 runOnUIImmediately(() => {
-  'worklet';
+  "worklet";
   global.LayoutAnimationsManager = createLayoutAnimationManager();
 })();
 
